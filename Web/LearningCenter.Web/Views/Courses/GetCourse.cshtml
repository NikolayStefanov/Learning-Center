@using System.Security.Claims;
@model LearningCenter.Web.ViewModels.Courses.CourseViewModel
@{
    ViewData["Title"] = Model.Title;
}

<div id="coursePageBg" class="bg-image bg-parallax overlay"></div>
<div id="coursePage" class=" white-text">
    <div class="card row">
        <div class="col-md-7">
            <div class="col-md-5">
                <h2 class="card-title white-text">@Model.Title</h2>
                <hr />
                <ul>
                    <li><h5 class="white-text"><i class="fas fa-dollar-sign"></i> Price: $@Model.Price</h5></li>
                    <li><h5 class="white-text"><i class="fas fa-user-tie"></i> Author: <a asp-action="Index" asp-controller="Account" asp-route-id="@Model.AuthorId"><u>@Model.AuthorName</u></a>  </h5></li>
                    <li><h5 class="white-text"><i class="fas fa-history"></i> Created on: @Model.CreatedTimeFormated</h5></li>
                    <li><h5 class="white-text"><i class="fas fa-star-half-alt"></i> Rating:  <span id="averageRating">@Math.Round(Model.AverageRating, 1)</span> / 5 (<span id="ratingsCount">@Model.RatingsCount</span>)</h5></li>
                </ul>
                <img id="coursePhotoImg" src="@Model.ThumbnailUrl" class="card-img-top" width="300px" height="300px" alt="ThumbnailPhoto">
                <hr />

                @if (Model.AuthorEmail != this.User.Identity.Name)
                {
                    <h2 class="white-text">Add review:</h2>
                    <div class="media">
                        <div class="media-body">
                            <h4 class="mt-0 white-text">From: <span id="userEmail">@this.User.Identity.Name</span></h4>
                            <div class="form-group text-center white-text">
                                <label for="reviewContent">Content</label>
                                <textarea class="form-control col-md-8" id="reviewContent" rows="4"></textarea>
                                <br />
                                <button type="reset" onclick="createReview()" class="btn btn-primary">Submit</button>
                            </div>
                        </div>
                    </div>
                }

            </div>
            <div id="courseDescription" class="col-md-6 text-center">
                <div class="card-body">
                    @if (Model.Students.Any(x => x.StudentId == this.User.FindFirst(ClaimTypes.NameIdentifier).Value))
                    {
                        <a id="removeFromCourseBag" asp-action="RemoveCourseFromBag" asp-controller="Courses" asp-route-id="@Model.Id" class="btn btn-danger card-link">Remove from Courses Bag</a>
                    }
                    else
                    {
                        <a id="addInCourseBag" asp-action="AddCourseInBag" asp-controller="Courses" asp-route-id="@Model.Id" class="btn btn-success card-link">Add In Courses Bag</a>
                    }


                </div>
                <div class="container d-flex justify-content-center mt-200">
                    <div class="row">
                        <div class="col-md-5">
                            <h3 class="white-text"><i class="far fa-star"></i> Rate course: </h3>
                        </div>
                        <div id="starsId" class="stars">
                            <form action="">
                                <input class="star star-5" id="star-5" type="radio" name="star" onclick="StarClicked(5)" />
                                <label class="star star-5" for="star-5"></label>
                                <input class="star star-4" id="star-4" type="radio" name="star" onclick="StarClicked(4)" />
                                <label class="star star-4" for="star-4"></label>
                                <input class="star star-3" id="star-3" type="radio" name="star" onclick="StarClicked(3)" />
                                <label class="star star-3" for="star-3"></label>
                                <input class="star star-2" id="star-2" type="radio" name="star" onclick="StarClicked(2)" />
                                <label class="star star-2" for="star-2"></label>
                                <input class="star star-1" id="star-1" type="radio" name="star" onclick="StarClicked(1)" />
                                <label class="star star-1" for="star-1"></label>
                            </form>
                        </div>
                    </div>
                </div>
                <hr />
                <p class="card-text"><b>Description: </b>@Model.Description</p>
                <hr />
                <h2 class="white-text">Reviews:</h2>
                @if (Model.Reviews.Any())
                {
                    <ul id="reviewList" class="list-unstyled">
                        @foreach (var review in Model.Reviews.OrderByDescending(x => x.CreatedOn))
                        {
                            <li id="review" class="media row">
                                <img id="reviewPhoto" width="75px;" height="75px;" src="@review.AuthorProfilePictureUrl" class="" alt="reviewAuthorPhoto">

                                <div id="reviewContent" class="media-body white-text">
                                    <h4 class="white-text"><i class="fas fa-user"></i> @review.AuthorFirstName @review.AuthorLastName</h4>
                                    <p>@review.Content</p>
                                    <div>
                                        <span id="createdOn" class="white-text text-center"> <i class="far fa-clock"></i> <span id="createdOnIn">@review.CreatedOn.ToString("dd-MMM-y HH:mm:ss")</span></span>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
        <div id="videosBar" class="col-md-5 text-center">
            <div class="col-md-12">
                <h1 class="white-text">LECTURES:</h1>
                <hr />
                @*<div class="embed-responsive embed-responsive-16by9">
                        <iframe class="embed-responsive-item" src="https://www.youtube.com/embed/v64KOxKVLVg" allowfullscreen></iframe>
                    </div>*@

                <div class="right-bar">
                    <div class="right-bar-panel rightbar-items">
                        <div class="right-bar-panel rightbar-items">
                            <div data-spy="scroll" class="scrollspy-example">
                                <ul id="TopVideosList" class="stacked-list">
                                    @foreach (var lecture in Model.Lectures)
                                    {
                                        <li class="media">
                                            <div class="media-left media-top">
                                                <a href="@lecture.VideoUrl" style="position: relative"> <img id="" src="@lecture.ThumbnailUrl" width="150" height="115"></a>
                                            </div>
                                            <div class="media-body">
                                                <a class="text-grey-900" href="@lecture.VideoUrl"> <h3 class="white-text">@lecture.Title</h3></a>
                                                <div class="col">
                                                    @if (lecture.AdditionalResources.Any())
                                                    {
                                                        <span><b>Download Resurces: </b></span>
                                                    }

                                                    @foreach (var resource in lecture.AdditionalResources)
                                                    {
                                                        <span>[<i class="fas fa-download"></i>] | </span>
                                                    }
                                                </div>
                                                <span>@lecture.ShortDescription <a class="btn" onclick="showMore(event)">[Show More]</a></span>
                                                <span class="longDescription">@lecture.Description <a class="btn" onclick="showLess(event)">[Show Less]</a></span>

                                                <div class="setRight">
                                                    <span class="time"><i class="far fa-clock"></i> @lecture.CreatedOn.ToString("dd-MMM-y HH:mm:ss")</span>
                                                </div>
                                            </div>
                                        </li>
                                        <hr />
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>



                @if (this.User.Identity.Name == Model.AuthorEmail)
                {
                    <div>
                        <div id="addCourseButton">
                            <h1><a asp-action="Add" asp-controller="Lectures" asp-route-id="@Model.Id"><i class="far fa-plus-square fa-4x"></i></a></h1>
                            <h3><a asp-action="Add" asp-controller="Lectures" asp-route-id="@Model.Id">Add Lecture</a></h3>
                        </div>
                    </div>
                }

            </div>
        </div>

    </div>
</div>
<form method="post" id="antiForgery"></form>

@section Scripts{
    <script>
        async function createReview() {
            var authorEmail = document.getElementById("userEmail").textContent;
            var courseId = @Model.Id;
            var reviewContent = document.getElementById("reviewContent").value;

            var data = { authorEmail: authorEmail, courseId: courseId, content: reviewContent };
            var antiForgeryToken = document.querySelector("#antiForgery input").getAttribute('value');

            var uri = "/api/Reviews";
            fetch(uri, {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': antiForgeryToken,
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    var authorName = data["authorFullName"];
                    var reviewContent = data["content"];
                    var createdOn = data["createdOn"];
                    var photoUrl = data["authorProfilePictureUrl"];

                    var m = new Date(createdOn);
                    var dateString = (m.getUTCMonth() + 1) + "-" + m.getUTCDate() + "-" + m.getUTCFullYear() + " " + m.getUTCHours() + ":" + m.getUTCMinutes() + ":" + m.getSeconds();

                    var list = document.getElementById("review").cloneNode(true);

                    list.querySelector("#reviewPhoto").src = photoUrl;
                    list.querySelector("#createdOnIn").textContent = dateString;
                    list.querySelector("#reviewContent h4").textContent = authorName;
                    list.querySelector("#reviewContent p").textContent = reviewContent;

                    document.getElementById("reviewContent").value = '';
                    document.getElementById("reviewList").prepend(list);
                    console.log(list);
                });

        };
    </script>

    <script>
        window.addEventListener('load', hideLongDescription);
        function hideLongDescription() {
            document.querySelectorAll(".longDescription").forEach(x => x.style.display = 'none');
        }
    </script>
    <script type="text/javascript">
        function showMore(ev) {
            ev.target.parentElement.style.display = 'none';
            ev.target.parentElement.nextElementSibling.style.display = 'block';
        }
    </script>
    <script type="text/javascript">
        function showLess(ev) {
            ev.target.parentElement.style.display = 'none';
            ev.target.parentElement.previousElementSibling.style.display = 'block';
        }
    </script>
    <script>
     window.addEventListener('load', setRating);
        function setRating() {
            var rateValue = @Model.CourseRateByCurrentUser;
            var selector = `#starsId  label.star-${rateValue}`;
            document.querySelector(selector).click();
        }
    </script>
    <script>
        function StarClicked(value) {
            var starValue = value;
            var courseId = @Model.Id;
            var data = { value: starValue, courseId: courseId };

            var antiForgeryToken = document.querySelector("#antiForgery input").getAttribute('value');

            var url = "/api/Rates";
            fetch(url, {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': antiForgeryToken,
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    var averageRating = data["averageRating"].toFixed(1);
                    var ratesCount = data["ratesCount"];

                    var ratesCountElement = document.getElementById("ratingsCount");

                    ratesCountElement.textContent = "";
                    ratesCountElement.textContent = `${ratesCount}`;

                    var ratingElement = document.getElementById("averageRating");

                    ratingElement.textContent = "";
                    ratingElement.textContent = `${averageRating}`;
                });
        }
    </script>
}